# Функции и модули
# Функция — это фрагмент программы, используемый многократно

# def sum_numbers(n):
#   summa = 0
#   for i in range(1, n + 1):
#     summa += i
#   # print(summa)
#   return summa

# a = (sum_numbers(10))
# print(a)

# def sum_numbers(n, y = 'hello'):
#   print(y)
#   summa = 0
#   for i in range(1, n + 1):
#     summa += i
#   # print(summa)
#   return summa

# a = (sum_numbers(5, 'hi'))
# print(a)

# def sum_str(*args):
#   res = ''
#   for i in args:
#     res += i
#   return res

# print(sum_str('q', 'e', 'l'))
# print(sum_str('q', 'e', 'l', 'a', 's', 'd'))
# # print(sum_str(1, 8, 9))


# Import moduls

# import modul1 # импорт модуля из файла
# print (modul1.max1(5, 9)) # в коде обязательно указываем имя функции из модуля, которую хотим вызвать

# from modul1 import max1 # использование фунции из импортированного модуля
# print(max1(10, 15))

# import modul1 as m1
# print (m1.max1(12,44))


# Рекурсия
# Рекурсия — это функция, вызывающая сама себя.
# С рекурсией Вы знакомы с C#, в Python она ничем не отличается, давай рассмотрим
# следующую задачу: Пользователь вводит число n. Необходимо вывести n - первых
# членов последовательности Фибоначчи.

# def fib(n):
#     if n in [1, 2]:             #обязательно указываем "базис" - условия выхода из рекурсии
#         return 1
#     return fib(n-1) + fib(n-2)


# list_1 = []
# for i in range(1, 10):
#     list_1.append(fib(i))
# print(list_1)


# Алгоритмы
# Алгоритмом называется набор инструкций для выполнения некоторой задачи. В
# принципе, любой фрагмент программного кода можно назвать алгоритмом, но мы с
# Вами рассмотрим 2 самых интересных алгоритмы сортировок:
# ● Быстрая сортировка
# ● Сортировка слиянием
# Быстрая сортировка
# “Программирование это разбиение чего-то большого и невозможного на что-то
# маленькое и вполне реальное”
# Быстрая сортировка принадлежит такой стратегии, как “разделяй и властвуй”.
# Сначала рассмотрим пример, затем напишем программный код
# Два друга решили поиграть в игру: один загадывает число от 1 до 100, другой
# должен отгадать. Согласитесь, что мы можем перебирать эти значения в случайном
# порядке, например: 32, 27, 60, 73… Да, мы можем угадать в какой-то момент, но что
# если мы обратиться к стратегии “разделяй и властвуй” Обозначим друзей, друг_1
# это Иван, который загадал число, друг_2 это Петр, который отгадывает. Итак
# начнем:
# Иван загадал число 77.
# Петр: Число больше 50? Иван: Да.
# Петр: Число больше 75? Иван: Да.
# Петр: Число больше 87? Иван: Нет.
# Петр: Число больше 81? Иван: Нет.
# Петр: Число больше 78? Иван: Нет.
# Петр: Число больше 76? Иван: Да
# Число оказалось в диапазоне 76 < x < 78, значит это число 77. Задача решена. На
# самом деле мы сейчас познакомились с алгоритмом бинарного поиска, который
# также принадлежит стратегии “разделяй и властвуй”. Давайте перейдем к
# обсуждению программного кода быстрой сортировки

# ● Быстрая сортировка

# def quick_sort(array):
#     if len(array) <= 1:
#         return array
#     else:
#         pivot = array[0]
#     less = [i for i in array[1:] if i <= pivot]
#     greater = [i for i in array[1:] if i > pivot]
#     return quick_sort(less) + [pivot] + quick_sort(greater)

# print(quick_sort([10, 5, 2, 3]))         #[2, 3, 5, 10]

# ● 1-е повторение рекурсии:
# ○ array = [10, 5, 2, 3]
# ○ pivot = 10
# ○ less = [5, 2, 3]
# ○ greater = []
# ○ return quicksort([5, 2, 3]) + [10] + quicksort([])
# ● 2-е повторение рекурсии:
# ○ array = [5, 2, 3]
# ○ pivot = 5
# ○ less = [2, 3]
# ○ greater = []
# ○ return quicksort([2, 3]) + [5] + quicksort([]) # Важно! Не забывайте, что
# здесь помимо вызова рекурсии добавляется список [10]
# ● 3-е повторение рекурсии:
# ○ array = [2, 3]
# ○ return [2, 3] # Сработал базовый случай рекурсии
# На этом работа рекурсии завершилась и итоговый список будет выглядеть таким
# образом: [2, 3] + [5] + [10] = [2, 3, 5, 10]

# Сортировка слиянием

def merge_sort(nums):
    if len(nums) > 1:
        mid = len(nums) // 2
        left = nums[:mid]
        rigth = nums[mid:]
        merge_sort(left)
        merge_sort(rigth)
        i = j = k = 0
        while i < len(left) and j < len(rigth):
            if left[i] < rigth[j]:
                nums[k] = left[i]
                i += 1
            else:
                nums[k] = rigth[j]
                j += 1
            k += 1

        while i < len(left):
            nums[k] = left[i]
            i += 1
            k += 1

        while j < len(rigth):
            nums[k] = rigth[j]
            j += 1
            k += 1

list1 = [1, 5, 6, 7, 8, 43, 53, 1, 22, 434, 65, 7, 78, 4, 3]
print(list1)
merge_sort(list1)
print(list1)